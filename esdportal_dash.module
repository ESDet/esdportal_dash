<?php

/**
 * @file
 * Module file for esdportal_dash.
 *
 * Provide a page at user/:uid/dash for school leaders and superintendents
 * that lists:
 *   * all school profiles owned by user (for school leaders)
 *   * or all school profiles that are children of school terms where user is
 *     specified in the superintendent entityreference field (for superintendents)
 */

/**
 * Implements hook_menu().
 */
function esdportal_dash_menu() {
  $items['user/%/dash'] = array(
    'page callback' => 'esdportal_dash_page',
    'page arguments' => array(1),
    'access callback' => 'esdportal_dash_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function esdportal_dash_access() {
  global $user;
  if (arg(1) != $user->uid) {
    return FALSE;
  }
  return _esdportal_dash_check_user($user);
}

/**
 * Implements hook_theme().
 */
function esdportal_dash_theme() {
  return array(
    'esdportal_dash' => array(
      'variables' => array(),
      'template' => 'esdportal-dash',
    ),
  );
}

/**
 * Implements template_preprocess().
function template_preprocess_esdportal_dash(&$vars) {
}
 */

/**
 * Render dashboard page.
 *
 * @param int $uid
 *   Drupal user id
 *
 * @return string
 */
function esdportal_dash_page($uid) {
  global $user;

  // Validate uid
  $uid = intval($uid);
  if ($uid < 1) {
    return t('Please provide a numeric uid.');
  }

  // Get list of schools for which user is superintendent or leader and attach child items
  $superintendented_schools = _esdportal_dash_superintendented_school_tids($user->uid);
  $updatable_schools = _esdportal_dash_updatable_school_tids($user->uid);
  $schools = array_flip(array_unique(array_merge($superintendented_schools, $updatable_schools)));
  foreach ($schools as $tid => &$data) {
    $data = array();
    $term = taxonomy_term_load($tid);
    $nids = taxonomy_select_nodes($tid);
    // Label school profiles as such... but only one :)
    foreach ($nids as $nid) {
      if (!isset($data['school_profile_nid']) && _esdportal_dash_nid_is_school_profile($nid)) {
        $data['school_profile_nid'] = $nid;
      }
    }
    // Attach aside (report links) and name
    $data['aside'] = drupal_render(taxonomy_term_view($term, 'aside'));
    $data['name'] = $term->name;
    // Mark updatable schools as such
    $data['updatable'] = (in_array($tid, $updatable_schools)) ? TRUE : FALSE;
  }

  return theme('esdportal_dash', array('schools' => $schools));
}

/**
 * Implements hook_user_login().
 *
 * If user is a superintendent or school leader, redirect to dashboard.
 */
function esdportal_dash_user_login(&$edit, $account) {
  if (_esdportal_dash_check_user($account)) {
    $_GET['destination'] = 'user/' . $account->uid . '/dash';
  }
}

/**
 * Get school tids for which $uid is a superintendent
 *
 * @param int $uid
 *
 * @return
 *   Array of taxonomy term IDs
 */
function _esdportal_dash_superintendented_school_tids($uid) {
  // Get terms
  $tids = db_select('field_data_field_superintendents', 'supers')
            ->fields('supers', array('entity_id'))
            ->condition('field_superintendents_target_id', $uid)
            ->execute()
            ->fetchCol();

  return $tids;
}

/**
 * Get parent school tids of school_profiles for which $uid has acl update perms.
 *
 * @param int $uid
 *
 * @return
 *   Array of taxonomy term IDs
 */
function _esdportal_dash_updatable_school_tids($uid) {
  $tids = db_query("SELECT fdfs.field_school_tid FROM {acl_user} au INNER JOIN {acl_node} an ON au.acl_id = an.acl_id INNER JOIN {field_data_field_school} AS fdfs ON an.nid=fdfs.entity_id WHERE an.grant_update = 1 AND au.uid = :uid", array("uid" => $uid))->fetchCol();

  return $tids;
}

/**
 * Is nid referring to a school profile node?
 *
 * @param int $nid
 *
 * @return
 *   bool
 */
function _esdportal_dash_nid_is_school_profile($nid) {
  $type = db_select('node')
            ->fields('node', array('type'))
            ->condition('nid', $nid)
            ->execute()
            ->fetchField();

  return $type == 'school_profile';
}

/**
 * Check if user should see the dashboard.
 *
 * @param object $user
 *   Drupal user account object
 *
 * @return bool
 */
function _esdportal_dash_check_user($user) {
  $user_roles = array_values($user->roles);
  if (!is_array($user_roles)) {
    return FALSE;
  }
  if (in_array('Superintendent', $user_roles) || in_array('School Leader', $user_roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

